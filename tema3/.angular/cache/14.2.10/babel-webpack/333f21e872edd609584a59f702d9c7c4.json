{"ast":null,"code":"import { startOfWeek, startOfMonth, setYear, addYears, setMonth, addMonths, setDay, isSameDay, isSameSecond, isSameMinute, isSameHour, isSameMonth, isSameYear, differenceInCalendarDays, differenceInSeconds, differenceInMinutes, differenceInHours, differenceInCalendarMonths, differenceInCalendarYears, isToday, isValid, isFirstDayOfMonth, isLastDayOfMonth } from 'date-fns';\nimport { warn } from 'ng-zorro-antd/core/logger';\nimport { getLocaleDayPeriods, FormStyle, TranslationWidth } from '@angular/common';\nimport { isNotNil } from 'ng-zorro-antd/core/util';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nfunction wrongSortOrder(rangeValue) {\n  const [start, end] = rangeValue;\n  return !!start && !!end && end.isBeforeDay(start);\n}\n\nfunction normalizeRangeValue(value, hasTimePicker, type = 'month', activePart = 'left') {\n  const [start, end] = value;\n  let newStart = start || new CandyDate();\n  let newEnd = end || (hasTimePicker ? newStart : newStart.add(1, type));\n\n  if (start && !end) {\n    newStart = start;\n    newEnd = hasTimePicker ? start : start.add(1, type);\n  } else if (!start && end) {\n    newStart = hasTimePicker ? end : end.add(-1, type);\n    newEnd = end;\n  } else if (start && end && !hasTimePicker) {\n    if (start.isSame(end, type)) {\n      newEnd = newStart.add(1, type);\n    } else {\n      if (activePart === 'left') {\n        newEnd = newStart.add(1, type);\n      } else {\n        newStart = newEnd.add(-1, type);\n      }\n    }\n  }\n\n  return [newStart, newEnd];\n}\n\nfunction cloneDate(value) {\n  if (Array.isArray(value)) {\n    return value.map(v => v instanceof CandyDate ? v.clone() : null);\n  } else {\n    return value instanceof CandyDate ? value.clone() : null;\n  }\n}\n/**\n * Wrapping kind APIs for date operating and unify\n * NOTE: every new API return new CandyDate object without side effects to the former Date object\n * NOTE: most APIs are based on local time other than customized locale id (this needs tobe support in future)\n * TODO: support format() against to angular's core API\n */\n\n\nclass CandyDate {\n  // locale: string; // Custom specified locale ID\n  constructor(date) {\n    if (date) {\n      if (date instanceof Date) {\n        this.nativeDate = date;\n      } else if (typeof date === 'string' || typeof date === 'number') {\n        warn('The string type is not recommended for date-picker, use \"Date\" type');\n        this.nativeDate = new Date(date);\n      } else {\n        throw new Error('The input date type is not supported (\"Date\" is now recommended)');\n      }\n    } else {\n      this.nativeDate = new Date();\n    }\n  }\n\n  calendarStart(options) {\n    return new CandyDate(startOfWeek(startOfMonth(this.nativeDate), options));\n  } // ---------------------------------------------------------------------\n  // | Native shortcuts\n  // -----------------------------------------------------------------------------\\\n\n\n  getYear() {\n    return this.nativeDate.getFullYear();\n  }\n\n  getMonth() {\n    return this.nativeDate.getMonth();\n  }\n\n  getDay() {\n    return this.nativeDate.getDay();\n  }\n\n  getTime() {\n    return this.nativeDate.getTime();\n  }\n\n  getDate() {\n    return this.nativeDate.getDate();\n  }\n\n  getHours() {\n    return this.nativeDate.getHours();\n  }\n\n  getMinutes() {\n    return this.nativeDate.getMinutes();\n  }\n\n  getSeconds() {\n    return this.nativeDate.getSeconds();\n  }\n\n  getMilliseconds() {\n    return this.nativeDate.getMilliseconds();\n  } // ---------------------------------------------------------------------\n  // | New implementing APIs\n  // ---------------------------------------------------------------------\n\n\n  clone() {\n    return new CandyDate(new Date(this.nativeDate));\n  }\n\n  setHms(hour, minute, second) {\n    const newDate = new Date(this.nativeDate.setHours(hour, minute, second));\n    return new CandyDate(newDate);\n  }\n\n  setYear(year) {\n    return new CandyDate(setYear(this.nativeDate, year));\n  }\n\n  addYears(amount) {\n    return new CandyDate(addYears(this.nativeDate, amount));\n  } // NOTE: month starts from 0\n  // NOTE: Don't use the native API for month manipulation as it not restrict the date when it overflows, eg. (new Date('2018-7-31')).setMonth(1) will be date of 2018-3-03 instead of 2018-2-28\n\n\n  setMonth(month) {\n    return new CandyDate(setMonth(this.nativeDate, month));\n  }\n\n  addMonths(amount) {\n    return new CandyDate(addMonths(this.nativeDate, amount));\n  }\n\n  setDay(day, options) {\n    return new CandyDate(setDay(this.nativeDate, day, options));\n  }\n\n  setDate(amount) {\n    const date = new Date(this.nativeDate);\n    date.setDate(amount);\n    return new CandyDate(date);\n  }\n\n  addDays(amount) {\n    return this.setDate(this.getDate() + amount);\n  }\n\n  add(amount, mode) {\n    switch (mode) {\n      case 'decade':\n        return this.addYears(amount * 10);\n\n      case 'year':\n        return this.addYears(amount);\n\n      case 'month':\n        return this.addMonths(amount);\n\n      default:\n        return this.addMonths(amount);\n    }\n  }\n\n  isSame(date, grain = 'day') {\n    let fn;\n\n    switch (grain) {\n      case 'decade':\n        fn = (pre, next) => Math.abs(pre.getFullYear() - next.getFullYear()) < 11;\n\n        break;\n\n      case 'year':\n        fn = isSameYear;\n        break;\n\n      case 'month':\n        fn = isSameMonth;\n        break;\n\n      case 'day':\n        fn = isSameDay;\n        break;\n\n      case 'hour':\n        fn = isSameHour;\n        break;\n\n      case 'minute':\n        fn = isSameMinute;\n        break;\n\n      case 'second':\n        fn = isSameSecond;\n        break;\n\n      default:\n        fn = isSameDay;\n        break;\n    }\n\n    return fn(this.nativeDate, this.toNativeDate(date));\n  }\n\n  isSameYear(date) {\n    return this.isSame(date, 'year');\n  }\n\n  isSameMonth(date) {\n    return this.isSame(date, 'month');\n  }\n\n  isSameDay(date) {\n    return this.isSame(date, 'day');\n  }\n\n  isSameHour(date) {\n    return this.isSame(date, 'hour');\n  }\n\n  isSameMinute(date) {\n    return this.isSame(date, 'minute');\n  }\n\n  isSameSecond(date) {\n    return this.isSame(date, 'second');\n  }\n\n  isBefore(date, grain = 'day') {\n    if (date === null) {\n      return false;\n    }\n\n    let fn;\n\n    switch (grain) {\n      case 'year':\n        fn = differenceInCalendarYears;\n        break;\n\n      case 'month':\n        fn = differenceInCalendarMonths;\n        break;\n\n      case 'day':\n        fn = differenceInCalendarDays;\n        break;\n\n      case 'hour':\n        fn = differenceInHours;\n        break;\n\n      case 'minute':\n        fn = differenceInMinutes;\n        break;\n\n      case 'second':\n        fn = differenceInSeconds;\n        break;\n\n      default:\n        fn = differenceInCalendarDays;\n        break;\n    }\n\n    return fn(this.nativeDate, this.toNativeDate(date)) < 0;\n  }\n\n  isBeforeYear(date) {\n    return this.isBefore(date, 'year');\n  }\n\n  isBeforeMonth(date) {\n    return this.isBefore(date, 'month');\n  }\n\n  isBeforeDay(date) {\n    return this.isBefore(date, 'day');\n  } // Equal to today accurate to \"day\"\n\n\n  isToday() {\n    return isToday(this.nativeDate);\n  }\n\n  isValid() {\n    return isValid(this.nativeDate);\n  }\n\n  isFirstDayOfMonth() {\n    return isFirstDayOfMonth(this.nativeDate);\n  }\n\n  isLastDayOfMonth() {\n    return isLastDayOfMonth(this.nativeDate);\n  }\n\n  toNativeDate(date) {\n    return date instanceof CandyDate ? date.nativeDate : date;\n  }\n\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nconst timeUnits = [['Y', 1000 * 60 * 60 * 24 * 365], ['M', 1000 * 60 * 60 * 24 * 30], ['D', 1000 * 60 * 60 * 24], ['H', 1000 * 60 * 60], ['m', 1000 * 60], ['s', 1000], ['S', 1] // million seconds\n];\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nclass NgTimeParser {\n  constructor(format, localeId) {\n    this.format = format;\n    this.localeId = localeId;\n    this.regex = null;\n    this.matchMap = {\n      hour: null,\n      minute: null,\n      second: null,\n      periodNarrow: null,\n      periodWide: null,\n      periodAbbreviated: null\n    };\n    this.genRegexp();\n  }\n\n  toDate(str) {\n    const result = this.getTimeResult(str);\n    const time = new Date();\n\n    if (isNotNil(result?.hour)) {\n      time.setHours(result.hour);\n    }\n\n    if (isNotNil(result?.minute)) {\n      time.setMinutes(result.minute);\n    }\n\n    if (isNotNil(result?.second)) {\n      time.setSeconds(result.second);\n    }\n\n    if (result?.period === 1 && time.getHours() < 12) {\n      time.setHours(time.getHours() + 12);\n    }\n\n    return time;\n  }\n\n  getTimeResult(str) {\n    const match = this.regex.exec(str);\n    let period = null;\n\n    if (match) {\n      if (isNotNil(this.matchMap.periodNarrow)) {\n        period = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Narrow).indexOf(match[this.matchMap.periodNarrow + 1]);\n      }\n\n      if (isNotNil(this.matchMap.periodWide)) {\n        period = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Wide).indexOf(match[this.matchMap.periodWide + 1]);\n      }\n\n      if (isNotNil(this.matchMap.periodAbbreviated)) {\n        period = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Abbreviated).indexOf(match[this.matchMap.periodAbbreviated + 1]);\n      }\n\n      return {\n        hour: isNotNil(this.matchMap.hour) ? Number.parseInt(match[this.matchMap.hour + 1], 10) : null,\n        minute: isNotNil(this.matchMap.minute) ? Number.parseInt(match[this.matchMap.minute + 1], 10) : null,\n        second: isNotNil(this.matchMap.second) ? Number.parseInt(match[this.matchMap.second + 1], 10) : null,\n        period\n      };\n    } else {\n      return null;\n    }\n  }\n\n  genRegexp() {\n    let regexStr = this.format.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$&');\n    const hourRegex = /h{1,2}/i;\n    const minuteRegex = /m{1,2}/;\n    const secondRegex = /s{1,2}/;\n    const periodNarrow = /aaaaa/;\n    const periodWide = /aaaa/;\n    const periodAbbreviated = /a{1,3}/;\n    const hourMatch = hourRegex.exec(this.format);\n    const minuteMatch = minuteRegex.exec(this.format);\n    const secondMatch = secondRegex.exec(this.format);\n    const periodNarrowMatch = periodNarrow.exec(this.format);\n    let periodWideMatch = null;\n    let periodAbbreviatedMatch = null;\n\n    if (!periodNarrowMatch) {\n      periodWideMatch = periodWide.exec(this.format);\n    }\n\n    if (!periodWideMatch && !periodNarrowMatch) {\n      periodAbbreviatedMatch = periodAbbreviated.exec(this.format);\n    }\n\n    const matchs = [hourMatch, minuteMatch, secondMatch, periodNarrowMatch, periodWideMatch, periodAbbreviatedMatch].filter(m => !!m).sort((a, b) => a.index - b.index);\n    matchs.forEach((match, index) => {\n      switch (match) {\n        case hourMatch:\n          this.matchMap.hour = index;\n          regexStr = regexStr.replace(hourRegex, '(\\\\d{1,2})');\n          break;\n\n        case minuteMatch:\n          this.matchMap.minute = index;\n          regexStr = regexStr.replace(minuteRegex, '(\\\\d{1,2})');\n          break;\n\n        case secondMatch:\n          this.matchMap.second = index;\n          regexStr = regexStr.replace(secondRegex, '(\\\\d{1,2})');\n          break;\n\n        case periodNarrowMatch:\n          this.matchMap.periodNarrow = index;\n          const periodsNarrow = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Narrow).join('|');\n          regexStr = regexStr.replace(periodNarrow, `(${periodsNarrow})`);\n          break;\n\n        case periodWideMatch:\n          this.matchMap.periodWide = index;\n          const periodsWide = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Wide).join('|');\n          regexStr = regexStr.replace(periodWide, `(${periodsWide})`);\n          break;\n\n        case periodAbbreviatedMatch:\n          this.matchMap.periodAbbreviated = index;\n          const periodsAbbreviated = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Abbreviated).join('|');\n          regexStr = regexStr.replace(periodAbbreviated, `(${periodsAbbreviated})`);\n          break;\n      }\n    });\n    this.regex = new RegExp(regexStr);\n  }\n\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CandyDate, cloneDate, normalizeRangeValue, timeUnits, wrongSortOrder, NgTimeParser as ɵNgTimeParser };","map":{"version":3,"names":["startOfWeek","startOfMonth","setYear","addYears","setMonth","addMonths","setDay","isSameDay","isSameSecond","isSameMinute","isSameHour","isSameMonth","isSameYear","differenceInCalendarDays","differenceInSeconds","differenceInMinutes","differenceInHours","differenceInCalendarMonths","differenceInCalendarYears","isToday","isValid","isFirstDayOfMonth","isLastDayOfMonth","warn","getLocaleDayPeriods","FormStyle","TranslationWidth","isNotNil","wrongSortOrder","rangeValue","start","end","isBeforeDay","normalizeRangeValue","value","hasTimePicker","type","activePart","newStart","CandyDate","newEnd","add","isSame","cloneDate","Array","isArray","map","v","clone","constructor","date","Date","nativeDate","Error","calendarStart","options","getYear","getFullYear","getMonth","getDay","getTime","getDate","getHours","getMinutes","getSeconds","getMilliseconds","setHms","hour","minute","second","newDate","setHours","year","amount","month","day","setDate","addDays","mode","grain","fn","pre","next","Math","abs","toNativeDate","isBefore","isBeforeYear","isBeforeMonth","timeUnits","NgTimeParser","format","localeId","regex","matchMap","periodNarrow","periodWide","periodAbbreviated","genRegexp","toDate","str","result","getTimeResult","time","setMinutes","setSeconds","period","match","exec","Format","Narrow","indexOf","Wide","Abbreviated","Number","parseInt","regexStr","replace","hourRegex","minuteRegex","secondRegex","hourMatch","minuteMatch","secondMatch","periodNarrowMatch","periodWideMatch","periodAbbreviatedMatch","matchs","filter","m","sort","a","b","index","forEach","periodsNarrow","join","periodsWide","periodsAbbreviated","RegExp","ɵNgTimeParser"],"sources":["C:/Users/Administrator/Facultate/CST/teme/tema3/node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-core-time.mjs"],"sourcesContent":["import { startOfWeek, startOfMonth, setYear, addYears, setMonth, addMonths, setDay, isSameDay, isSameSecond, isSameMinute, isSameHour, isSameMonth, isSameYear, differenceInCalendarDays, differenceInSeconds, differenceInMinutes, differenceInHours, differenceInCalendarMonths, differenceInCalendarYears, isToday, isValid, isFirstDayOfMonth, isLastDayOfMonth } from 'date-fns';\nimport { warn } from 'ng-zorro-antd/core/logger';\nimport { getLocaleDayPeriods, FormStyle, TranslationWidth } from '@angular/common';\nimport { isNotNil } from 'ng-zorro-antd/core/util';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nfunction wrongSortOrder(rangeValue) {\n    const [start, end] = rangeValue;\n    return !!start && !!end && end.isBeforeDay(start);\n}\nfunction normalizeRangeValue(value, hasTimePicker, type = 'month', activePart = 'left') {\n    const [start, end] = value;\n    let newStart = start || new CandyDate();\n    let newEnd = end || (hasTimePicker ? newStart : newStart.add(1, type));\n    if (start && !end) {\n        newStart = start;\n        newEnd = hasTimePicker ? start : start.add(1, type);\n    }\n    else if (!start && end) {\n        newStart = hasTimePicker ? end : end.add(-1, type);\n        newEnd = end;\n    }\n    else if (start && end && !hasTimePicker) {\n        if (start.isSame(end, type)) {\n            newEnd = newStart.add(1, type);\n        }\n        else {\n            if (activePart === 'left') {\n                newEnd = newStart.add(1, type);\n            }\n            else {\n                newStart = newEnd.add(-1, type);\n            }\n        }\n    }\n    return [newStart, newEnd];\n}\nfunction cloneDate(value) {\n    if (Array.isArray(value)) {\n        return value.map(v => (v instanceof CandyDate ? v.clone() : null));\n    }\n    else {\n        return value instanceof CandyDate ? value.clone() : null;\n    }\n}\n/**\n * Wrapping kind APIs for date operating and unify\n * NOTE: every new API return new CandyDate object without side effects to the former Date object\n * NOTE: most APIs are based on local time other than customized locale id (this needs tobe support in future)\n * TODO: support format() against to angular's core API\n */\nclass CandyDate {\n    // locale: string; // Custom specified locale ID\n    constructor(date) {\n        if (date) {\n            if (date instanceof Date) {\n                this.nativeDate = date;\n            }\n            else if (typeof date === 'string' || typeof date === 'number') {\n                warn('The string type is not recommended for date-picker, use \"Date\" type');\n                this.nativeDate = new Date(date);\n            }\n            else {\n                throw new Error('The input date type is not supported (\"Date\" is now recommended)');\n            }\n        }\n        else {\n            this.nativeDate = new Date();\n        }\n    }\n    calendarStart(options) {\n        return new CandyDate(startOfWeek(startOfMonth(this.nativeDate), options));\n    }\n    // ---------------------------------------------------------------------\n    // | Native shortcuts\n    // -----------------------------------------------------------------------------\\\n    getYear() {\n        return this.nativeDate.getFullYear();\n    }\n    getMonth() {\n        return this.nativeDate.getMonth();\n    }\n    getDay() {\n        return this.nativeDate.getDay();\n    }\n    getTime() {\n        return this.nativeDate.getTime();\n    }\n    getDate() {\n        return this.nativeDate.getDate();\n    }\n    getHours() {\n        return this.nativeDate.getHours();\n    }\n    getMinutes() {\n        return this.nativeDate.getMinutes();\n    }\n    getSeconds() {\n        return this.nativeDate.getSeconds();\n    }\n    getMilliseconds() {\n        return this.nativeDate.getMilliseconds();\n    }\n    // ---------------------------------------------------------------------\n    // | New implementing APIs\n    // ---------------------------------------------------------------------\n    clone() {\n        return new CandyDate(new Date(this.nativeDate));\n    }\n    setHms(hour, minute, second) {\n        const newDate = new Date(this.nativeDate.setHours(hour, minute, second));\n        return new CandyDate(newDate);\n    }\n    setYear(year) {\n        return new CandyDate(setYear(this.nativeDate, year));\n    }\n    addYears(amount) {\n        return new CandyDate(addYears(this.nativeDate, amount));\n    }\n    // NOTE: month starts from 0\n    // NOTE: Don't use the native API for month manipulation as it not restrict the date when it overflows, eg. (new Date('2018-7-31')).setMonth(1) will be date of 2018-3-03 instead of 2018-2-28\n    setMonth(month) {\n        return new CandyDate(setMonth(this.nativeDate, month));\n    }\n    addMonths(amount) {\n        return new CandyDate(addMonths(this.nativeDate, amount));\n    }\n    setDay(day, options) {\n        return new CandyDate(setDay(this.nativeDate, day, options));\n    }\n    setDate(amount) {\n        const date = new Date(this.nativeDate);\n        date.setDate(amount);\n        return new CandyDate(date);\n    }\n    addDays(amount) {\n        return this.setDate(this.getDate() + amount);\n    }\n    add(amount, mode) {\n        switch (mode) {\n            case 'decade':\n                return this.addYears(amount * 10);\n            case 'year':\n                return this.addYears(amount);\n            case 'month':\n                return this.addMonths(amount);\n            default:\n                return this.addMonths(amount);\n        }\n    }\n    isSame(date, grain = 'day') {\n        let fn;\n        switch (grain) {\n            case 'decade':\n                fn = (pre, next) => Math.abs(pre.getFullYear() - next.getFullYear()) < 11;\n                break;\n            case 'year':\n                fn = isSameYear;\n                break;\n            case 'month':\n                fn = isSameMonth;\n                break;\n            case 'day':\n                fn = isSameDay;\n                break;\n            case 'hour':\n                fn = isSameHour;\n                break;\n            case 'minute':\n                fn = isSameMinute;\n                break;\n            case 'second':\n                fn = isSameSecond;\n                break;\n            default:\n                fn = isSameDay;\n                break;\n        }\n        return fn(this.nativeDate, this.toNativeDate(date));\n    }\n    isSameYear(date) {\n        return this.isSame(date, 'year');\n    }\n    isSameMonth(date) {\n        return this.isSame(date, 'month');\n    }\n    isSameDay(date) {\n        return this.isSame(date, 'day');\n    }\n    isSameHour(date) {\n        return this.isSame(date, 'hour');\n    }\n    isSameMinute(date) {\n        return this.isSame(date, 'minute');\n    }\n    isSameSecond(date) {\n        return this.isSame(date, 'second');\n    }\n    isBefore(date, grain = 'day') {\n        if (date === null) {\n            return false;\n        }\n        let fn;\n        switch (grain) {\n            case 'year':\n                fn = differenceInCalendarYears;\n                break;\n            case 'month':\n                fn = differenceInCalendarMonths;\n                break;\n            case 'day':\n                fn = differenceInCalendarDays;\n                break;\n            case 'hour':\n                fn = differenceInHours;\n                break;\n            case 'minute':\n                fn = differenceInMinutes;\n                break;\n            case 'second':\n                fn = differenceInSeconds;\n                break;\n            default:\n                fn = differenceInCalendarDays;\n                break;\n        }\n        return fn(this.nativeDate, this.toNativeDate(date)) < 0;\n    }\n    isBeforeYear(date) {\n        return this.isBefore(date, 'year');\n    }\n    isBeforeMonth(date) {\n        return this.isBefore(date, 'month');\n    }\n    isBeforeDay(date) {\n        return this.isBefore(date, 'day');\n    }\n    // Equal to today accurate to \"day\"\n    isToday() {\n        return isToday(this.nativeDate);\n    }\n    isValid() {\n        return isValid(this.nativeDate);\n    }\n    isFirstDayOfMonth() {\n        return isFirstDayOfMonth(this.nativeDate);\n    }\n    isLastDayOfMonth() {\n        return isLastDayOfMonth(this.nativeDate);\n    }\n    toNativeDate(date) {\n        return date instanceof CandyDate ? date.nativeDate : date;\n    }\n}\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst timeUnits = [\n    ['Y', 1000 * 60 * 60 * 24 * 365],\n    ['M', 1000 * 60 * 60 * 24 * 30],\n    ['D', 1000 * 60 * 60 * 24],\n    ['H', 1000 * 60 * 60],\n    ['m', 1000 * 60],\n    ['s', 1000],\n    ['S', 1] // million seconds\n];\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NgTimeParser {\n    constructor(format, localeId) {\n        this.format = format;\n        this.localeId = localeId;\n        this.regex = null;\n        this.matchMap = {\n            hour: null,\n            minute: null,\n            second: null,\n            periodNarrow: null,\n            periodWide: null,\n            periodAbbreviated: null\n        };\n        this.genRegexp();\n    }\n    toDate(str) {\n        const result = this.getTimeResult(str);\n        const time = new Date();\n        if (isNotNil(result?.hour)) {\n            time.setHours(result.hour);\n        }\n        if (isNotNil(result?.minute)) {\n            time.setMinutes(result.minute);\n        }\n        if (isNotNil(result?.second)) {\n            time.setSeconds(result.second);\n        }\n        if (result?.period === 1 && time.getHours() < 12) {\n            time.setHours(time.getHours() + 12);\n        }\n        return time;\n    }\n    getTimeResult(str) {\n        const match = this.regex.exec(str);\n        let period = null;\n        if (match) {\n            if (isNotNil(this.matchMap.periodNarrow)) {\n                period = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Narrow).indexOf(match[this.matchMap.periodNarrow + 1]);\n            }\n            if (isNotNil(this.matchMap.periodWide)) {\n                period = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Wide).indexOf(match[this.matchMap.periodWide + 1]);\n            }\n            if (isNotNil(this.matchMap.periodAbbreviated)) {\n                period = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Abbreviated).indexOf(match[this.matchMap.periodAbbreviated + 1]);\n            }\n            return {\n                hour: isNotNil(this.matchMap.hour) ? Number.parseInt(match[this.matchMap.hour + 1], 10) : null,\n                minute: isNotNil(this.matchMap.minute) ? Number.parseInt(match[this.matchMap.minute + 1], 10) : null,\n                second: isNotNil(this.matchMap.second) ? Number.parseInt(match[this.matchMap.second + 1], 10) : null,\n                period\n            };\n        }\n        else {\n            return null;\n        }\n    }\n    genRegexp() {\n        let regexStr = this.format.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$&');\n        const hourRegex = /h{1,2}/i;\n        const minuteRegex = /m{1,2}/;\n        const secondRegex = /s{1,2}/;\n        const periodNarrow = /aaaaa/;\n        const periodWide = /aaaa/;\n        const periodAbbreviated = /a{1,3}/;\n        const hourMatch = hourRegex.exec(this.format);\n        const minuteMatch = minuteRegex.exec(this.format);\n        const secondMatch = secondRegex.exec(this.format);\n        const periodNarrowMatch = periodNarrow.exec(this.format);\n        let periodWideMatch = null;\n        let periodAbbreviatedMatch = null;\n        if (!periodNarrowMatch) {\n            periodWideMatch = periodWide.exec(this.format);\n        }\n        if (!periodWideMatch && !periodNarrowMatch) {\n            periodAbbreviatedMatch = periodAbbreviated.exec(this.format);\n        }\n        const matchs = [hourMatch, minuteMatch, secondMatch, periodNarrowMatch, periodWideMatch, periodAbbreviatedMatch]\n            .filter(m => !!m)\n            .sort((a, b) => a.index - b.index);\n        matchs.forEach((match, index) => {\n            switch (match) {\n                case hourMatch:\n                    this.matchMap.hour = index;\n                    regexStr = regexStr.replace(hourRegex, '(\\\\d{1,2})');\n                    break;\n                case minuteMatch:\n                    this.matchMap.minute = index;\n                    regexStr = regexStr.replace(minuteRegex, '(\\\\d{1,2})');\n                    break;\n                case secondMatch:\n                    this.matchMap.second = index;\n                    regexStr = regexStr.replace(secondRegex, '(\\\\d{1,2})');\n                    break;\n                case periodNarrowMatch:\n                    this.matchMap.periodNarrow = index;\n                    const periodsNarrow = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Narrow).join('|');\n                    regexStr = regexStr.replace(periodNarrow, `(${periodsNarrow})`);\n                    break;\n                case periodWideMatch:\n                    this.matchMap.periodWide = index;\n                    const periodsWide = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Wide).join('|');\n                    regexStr = regexStr.replace(periodWide, `(${periodsWide})`);\n                    break;\n                case periodAbbreviatedMatch:\n                    this.matchMap.periodAbbreviated = index;\n                    const periodsAbbreviated = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Abbreviated).join('|');\n                    regexStr = regexStr.replace(periodAbbreviated, `(${periodsAbbreviated})`);\n                    break;\n            }\n        });\n        this.regex = new RegExp(regexStr);\n    }\n}\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CandyDate, cloneDate, normalizeRangeValue, timeUnits, wrongSortOrder, NgTimeParser as ɵNgTimeParser };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}