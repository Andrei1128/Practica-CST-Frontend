{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { TemplateRef, Directive, Input, NgModule } from '@angular/core';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nclass NzStringTemplateOutletDirective {\n  constructor(viewContainer, templateRef) {\n    this.viewContainer = viewContainer;\n    this.templateRef = templateRef;\n    this.embeddedViewRef = null;\n    this.context = new NzStringTemplateOutletContext();\n    this.nzStringTemplateOutletContext = null;\n    this.nzStringTemplateOutlet = null;\n  }\n\n  static ngTemplateContextGuard(_dir, _ctx) {\n    return true;\n  }\n\n  recreateView() {\n    this.viewContainer.clear();\n    const isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n    const templateRef = isTemplateRef ? this.nzStringTemplateOutlet : this.templateRef;\n    this.embeddedViewRef = this.viewContainer.createEmbeddedView(templateRef, isTemplateRef ? this.nzStringTemplateOutletContext : this.context);\n  }\n\n  updateContext() {\n    const isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n    const newCtx = isTemplateRef ? this.nzStringTemplateOutletContext : this.context;\n    const oldCtx = this.embeddedViewRef.context;\n\n    if (newCtx) {\n      for (const propName of Object.keys(newCtx)) {\n        oldCtx[propName] = newCtx[propName];\n      }\n    }\n  }\n\n  ngOnChanges(changes) {\n    const {\n      nzStringTemplateOutletContext,\n      nzStringTemplateOutlet\n    } = changes;\n\n    const shouldRecreateView = () => {\n      let shouldOutletRecreate = false;\n\n      if (nzStringTemplateOutlet) {\n        if (nzStringTemplateOutlet.firstChange) {\n          shouldOutletRecreate = true;\n        } else {\n          const isPreviousOutletTemplate = nzStringTemplateOutlet.previousValue instanceof TemplateRef;\n          const isCurrentOutletTemplate = nzStringTemplateOutlet.currentValue instanceof TemplateRef;\n          shouldOutletRecreate = isPreviousOutletTemplate || isCurrentOutletTemplate;\n        }\n      }\n\n      const hasContextShapeChanged = ctxChange => {\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n        if (prevCtxKeys.length === currCtxKeys.length) {\n          for (const propName of currCtxKeys) {\n            if (prevCtxKeys.indexOf(propName) === -1) {\n              return true;\n            }\n          }\n\n          return false;\n        } else {\n          return true;\n        }\n      };\n\n      const shouldContextRecreate = nzStringTemplateOutletContext && hasContextShapeChanged(nzStringTemplateOutletContext);\n      return shouldContextRecreate || shouldOutletRecreate;\n    };\n\n    if (nzStringTemplateOutlet) {\n      this.context.$implicit = nzStringTemplateOutlet.currentValue;\n    }\n\n    const recreateView = shouldRecreateView();\n\n    if (recreateView) {\n      /** recreate view when context shape or outlet change **/\n      this.recreateView();\n    } else {\n      /** update context **/\n      this.updateContext();\n    }\n  }\n\n}\n\nNzStringTemplateOutletDirective.ɵfac = function NzStringTemplateOutletDirective_Factory(t) {\n  return new (t || NzStringTemplateOutletDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nNzStringTemplateOutletDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NzStringTemplateOutletDirective,\n  selectors: [[\"\", \"nzStringTemplateOutlet\", \"\"]],\n  inputs: {\n    nzStringTemplateOutletContext: \"nzStringTemplateOutletContext\",\n    nzStringTemplateOutlet: \"nzStringTemplateOutlet\"\n  },\n  exportAs: [\"nzStringTemplateOutlet\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzStringTemplateOutletDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nzStringTemplateOutlet]',\n      exportAs: 'nzStringTemplateOutlet'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.TemplateRef\n    }];\n  }, {\n    nzStringTemplateOutletContext: [{\n      type: Input\n    }],\n    nzStringTemplateOutlet: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NzStringTemplateOutletContext {}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzOutletModule {}\n\nNzOutletModule.ɵfac = function NzOutletModule_Factory(t) {\n  return new (t || NzOutletModule)();\n};\n\nNzOutletModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NzOutletModule\n});\nNzOutletModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzOutletModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: [NzStringTemplateOutletDirective],\n      declarations: [NzStringTemplateOutletDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzOutletModule, NzStringTemplateOutletDirective };","map":{"version":3,"names":["CommonModule","i0","TemplateRef","Directive","Input","NgModule","NzStringTemplateOutletDirective","constructor","viewContainer","templateRef","embeddedViewRef","context","NzStringTemplateOutletContext","nzStringTemplateOutletContext","nzStringTemplateOutlet","ngTemplateContextGuard","_dir","_ctx","recreateView","clear","isTemplateRef","createEmbeddedView","updateContext","newCtx","oldCtx","propName","Object","keys","ngOnChanges","changes","shouldRecreateView","shouldOutletRecreate","firstChange","isPreviousOutletTemplate","previousValue","isCurrentOutletTemplate","currentValue","hasContextShapeChanged","ctxChange","prevCtxKeys","currCtxKeys","length","indexOf","shouldContextRecreate","$implicit","ɵfac","ViewContainerRef","ɵdir","type","args","selector","exportAs","NzOutletModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["C:/Users/Administrator/Facultate/CST/teme/tema4/node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-core-outlet.mjs"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { TemplateRef, Directive, Input, NgModule } from '@angular/core';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzStringTemplateOutletDirective {\n    constructor(viewContainer, templateRef) {\n        this.viewContainer = viewContainer;\n        this.templateRef = templateRef;\n        this.embeddedViewRef = null;\n        this.context = new NzStringTemplateOutletContext();\n        this.nzStringTemplateOutletContext = null;\n        this.nzStringTemplateOutlet = null;\n    }\n    static ngTemplateContextGuard(_dir, _ctx) {\n        return true;\n    }\n    recreateView() {\n        this.viewContainer.clear();\n        const isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n        const templateRef = (isTemplateRef ? this.nzStringTemplateOutlet : this.templateRef);\n        this.embeddedViewRef = this.viewContainer.createEmbeddedView(templateRef, isTemplateRef ? this.nzStringTemplateOutletContext : this.context);\n    }\n    updateContext() {\n        const isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n        const newCtx = isTemplateRef ? this.nzStringTemplateOutletContext : this.context;\n        const oldCtx = this.embeddedViewRef.context;\n        if (newCtx) {\n            for (const propName of Object.keys(newCtx)) {\n                oldCtx[propName] = newCtx[propName];\n            }\n        }\n    }\n    ngOnChanges(changes) {\n        const { nzStringTemplateOutletContext, nzStringTemplateOutlet } = changes;\n        const shouldRecreateView = () => {\n            let shouldOutletRecreate = false;\n            if (nzStringTemplateOutlet) {\n                if (nzStringTemplateOutlet.firstChange) {\n                    shouldOutletRecreate = true;\n                }\n                else {\n                    const isPreviousOutletTemplate = nzStringTemplateOutlet.previousValue instanceof TemplateRef;\n                    const isCurrentOutletTemplate = nzStringTemplateOutlet.currentValue instanceof TemplateRef;\n                    shouldOutletRecreate = isPreviousOutletTemplate || isCurrentOutletTemplate;\n                }\n            }\n            const hasContextShapeChanged = (ctxChange) => {\n                const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n                const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n                if (prevCtxKeys.length === currCtxKeys.length) {\n                    for (const propName of currCtxKeys) {\n                        if (prevCtxKeys.indexOf(propName) === -1) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n                else {\n                    return true;\n                }\n            };\n            const shouldContextRecreate = nzStringTemplateOutletContext && hasContextShapeChanged(nzStringTemplateOutletContext);\n            return shouldContextRecreate || shouldOutletRecreate;\n        };\n        if (nzStringTemplateOutlet) {\n            this.context.$implicit = nzStringTemplateOutlet.currentValue;\n        }\n        const recreateView = shouldRecreateView();\n        if (recreateView) {\n            /** recreate view when context shape or outlet change **/\n            this.recreateView();\n        }\n        else {\n            /** update context **/\n            this.updateContext();\n        }\n    }\n}\nNzStringTemplateOutletDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.1.3\", ngImport: i0, type: NzStringTemplateOutletDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nNzStringTemplateOutletDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.1.3\", type: NzStringTemplateOutletDirective, selector: \"[nzStringTemplateOutlet]\", inputs: { nzStringTemplateOutletContext: \"nzStringTemplateOutletContext\", nzStringTemplateOutlet: \"nzStringTemplateOutlet\" }, exportAs: [\"nzStringTemplateOutlet\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.1.3\", ngImport: i0, type: NzStringTemplateOutletDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[nzStringTemplateOutlet]',\n                    exportAs: 'nzStringTemplateOutlet'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }]; }, propDecorators: { nzStringTemplateOutletContext: [{\n                type: Input\n            }], nzStringTemplateOutlet: [{\n                type: Input\n            }] } });\nclass NzStringTemplateOutletContext {\n}\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzOutletModule {\n}\nNzOutletModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.1.3\", ngImport: i0, type: NzOutletModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNzOutletModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.1.3\", ngImport: i0, type: NzOutletModule, declarations: [NzStringTemplateOutletDirective], imports: [CommonModule], exports: [NzStringTemplateOutletDirective] });\nNzOutletModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.1.3\", ngImport: i0, type: NzOutletModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.1.3\", ngImport: i0, type: NzOutletModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    exports: [NzStringTemplateOutletDirective],\n                    declarations: [NzStringTemplateOutletDirective]\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzOutletModule, NzStringTemplateOutletDirective };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}