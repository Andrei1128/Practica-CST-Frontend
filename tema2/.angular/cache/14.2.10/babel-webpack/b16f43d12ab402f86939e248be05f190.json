{"ast":null,"code":"import { isDevMode } from '@angular/core';\nimport { environment } from 'ng-zorro-antd/core/environments';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nconst record = {};\nconst PREFIX = '[NG-ZORRO]:';\n\nfunction notRecorded(...args) {\n  const asRecord = args.reduce((acc, c) => acc + c.toString(), '');\n\n  if (record[asRecord]) {\n    return false;\n  } else {\n    record[asRecord] = true;\n    return true;\n  }\n}\n\nfunction consoleCommonBehavior(consoleFunc, ...args) {\n  if (environment.isTestMode || isDevMode() && notRecorded(...args)) {\n    consoleFunc(...args);\n  }\n} // Warning should only be printed in dev mode and only once.\n\n\nconst warn = (...args) => consoleCommonBehavior((...arg) => console.warn(PREFIX, ...arg), ...args); // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n\n\nconst warnDeprecation = (...args) => {\n  if (!environment.isTestMode) {\n    const stack = new Error().stack;\n    return consoleCommonBehavior((...arg) => console.warn(PREFIX, 'deprecated:', ...arg, stack), ...args);\n  } else {\n    return () => {};\n  }\n}; // Log should only be printed in dev mode.\n\n\nconst log = (...args) => {\n  if (isDevMode()) {\n    console.log(PREFIX, ...args);\n  }\n};\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { PREFIX, log, warn, warnDeprecation };","map":{"version":3,"names":["isDevMode","environment","record","PREFIX","notRecorded","args","asRecord","reduce","acc","c","toString","consoleCommonBehavior","consoleFunc","isTestMode","warn","arg","console","warnDeprecation","stack","Error","log"],"sources":["C:/Users/Administrator/Facultate/CST/teme/tema2/node_modules/ng-zorro-antd/fesm2020/ng-zorro-antd-core-logger.mjs"],"sourcesContent":["import { isDevMode } from '@angular/core';\nimport { environment } from 'ng-zorro-antd/core/environments';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst record = {};\nconst PREFIX = '[NG-ZORRO]:';\nfunction notRecorded(...args) {\n    const asRecord = args.reduce((acc, c) => acc + c.toString(), '');\n    if (record[asRecord]) {\n        return false;\n    }\n    else {\n        record[asRecord] = true;\n        return true;\n    }\n}\nfunction consoleCommonBehavior(consoleFunc, ...args) {\n    if (environment.isTestMode || (isDevMode() && notRecorded(...args))) {\n        consoleFunc(...args);\n    }\n}\n// Warning should only be printed in dev mode and only once.\nconst warn = (...args) => consoleCommonBehavior((...arg) => console.warn(PREFIX, ...arg), ...args);\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nconst warnDeprecation = (...args) => {\n    if (!environment.isTestMode) {\n        const stack = new Error().stack;\n        return consoleCommonBehavior((...arg) => console.warn(PREFIX, 'deprecated:', ...arg, stack), ...args);\n    }\n    else {\n        return () => { };\n    }\n};\n// Log should only be printed in dev mode.\nconst log = (...args) => {\n    if (isDevMode()) {\n        console.log(PREFIX, ...args);\n    }\n};\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { PREFIX, log, warn, warnDeprecation };\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,eAA1B;AACA,SAASC,WAAT,QAA4B,iCAA5B;AAEA;AACA;AACA;AACA;;AACA,MAAMC,MAAM,GAAG,EAAf;AACA,MAAMC,MAAM,GAAG,aAAf;;AACA,SAASC,WAAT,CAAqB,GAAGC,IAAxB,EAA8B;EAC1B,MAAMC,QAAQ,GAAGD,IAAI,CAACE,MAAL,CAAY,CAACC,GAAD,EAAMC,CAAN,KAAYD,GAAG,GAAGC,CAAC,CAACC,QAAF,EAA9B,EAA4C,EAA5C,CAAjB;;EACA,IAAIR,MAAM,CAACI,QAAD,CAAV,EAAsB;IAClB,OAAO,KAAP;EACH,CAFD,MAGK;IACDJ,MAAM,CAACI,QAAD,CAAN,GAAmB,IAAnB;IACA,OAAO,IAAP;EACH;AACJ;;AACD,SAASK,qBAAT,CAA+BC,WAA/B,EAA4C,GAAGP,IAA/C,EAAqD;EACjD,IAAIJ,WAAW,CAACY,UAAZ,IAA2Bb,SAAS,MAAMI,WAAW,CAAC,GAAGC,IAAJ,CAAzD,EAAqE;IACjEO,WAAW,CAAC,GAAGP,IAAJ,CAAX;EACH;AACJ,C,CACD;;;AACA,MAAMS,IAAI,GAAG,CAAC,GAAGT,IAAJ,KAAaM,qBAAqB,CAAC,CAAC,GAAGI,GAAJ,KAAYC,OAAO,CAACF,IAAR,CAAaX,MAAb,EAAqB,GAAGY,GAAxB,CAAb,EAA2C,GAAGV,IAA9C,CAA/C,C,CACA;;;AACA,MAAMY,eAAe,GAAG,CAAC,GAAGZ,IAAJ,KAAa;EACjC,IAAI,CAACJ,WAAW,CAACY,UAAjB,EAA6B;IACzB,MAAMK,KAAK,GAAG,IAAIC,KAAJ,GAAYD,KAA1B;IACA,OAAOP,qBAAqB,CAAC,CAAC,GAAGI,GAAJ,KAAYC,OAAO,CAACF,IAAR,CAAaX,MAAb,EAAqB,aAArB,EAAoC,GAAGY,GAAvC,EAA4CG,KAA5C,CAAb,EAAiE,GAAGb,IAApE,CAA5B;EACH,CAHD,MAIK;IACD,OAAO,MAAM,CAAG,CAAhB;EACH;AACJ,CARD,C,CASA;;;AACA,MAAMe,GAAG,GAAG,CAAC,GAAGf,IAAJ,KAAa;EACrB,IAAIL,SAAS,EAAb,EAAiB;IACbgB,OAAO,CAACI,GAAR,CAAYjB,MAAZ,EAAoB,GAAGE,IAAvB;EACH;AACJ,CAJD;AAMA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAASF,MAAT,EAAiBiB,GAAjB,EAAsBN,IAAtB,EAA4BG,eAA5B"},"metadata":{},"sourceType":"module"}